// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domains "task-manager-api/domains"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"
)

// TaskRepository is an autogenerated mock type for the TaskRepository type
type TaskRepository struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx, task
func (_m *TaskRepository) CreateTask(ctx context.Context, task *domains.Task) (*domains.Task, error) {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *domains.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.Task) (*domains.Task, error)); ok {
		return rf(ctx, task)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *domains.Task) *domains.Task); ok {
		r0 = rf(ctx, task)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, *domains.Task) error); ok {
		r1 = rf(ctx, task)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTask provides a mock function with given fields: id
func (_m *TaskRepository) DeleteTask(id string) error {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(string) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// DeleteTaskByCreatorID provides a mock function with given fields: ctx, taskID, creatorID
func (_m *TaskRepository) DeleteTaskByCreatorID(ctx context.Context, taskID primitive.ObjectID, creatorID primitive.ObjectID) error {
	ret := _m.Called(ctx, taskID, creatorID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTaskByCreatorID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, taskID, creatorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindTaskByIDAndCreator provides a mock function with given fields: ctx, taskID, creatorID
func (_m *TaskRepository) FindTaskByIDAndCreator(ctx context.Context, taskID primitive.ObjectID, creatorID primitive.ObjectID) (*domains.Task, error) {
	ret := _m.Called(ctx, taskID, creatorID)

	if len(ret) == 0 {
		panic("no return value specified for FindTaskByIDAndCreator")
	}

	var r0 *domains.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) (*domains.Task, error)); ok {
		return rf(ctx, taskID, creatorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) *domains.Task); ok {
		r0 = rf(ctx, taskID, creatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r1 = rf(ctx, taskID, creatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindTasksByCreator provides a mock function with given fields: ctx, creatorID
func (_m *TaskRepository) FindTasksByCreator(ctx context.Context, creatorID primitive.ObjectID) ([]*domains.Task, error) {
	ret := _m.Called(ctx, creatorID)

	if len(ret) == 0 {
		panic("no return value specified for FindTasksByCreator")
	}

	var r0 []*domains.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) ([]*domains.Task, error)); ok {
		return rf(ctx, creatorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) []*domains.Task); ok {
		r0 = rf(ctx, creatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domains.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, creatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetAllTasks provides a mock function with given fields:
func (_m *TaskRepository) GetAllTasks() ([]*domains.Task, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for GetAllTasks")
	}

	var r0 []*domains.Task
	var r1 error
	if rf, ok := ret.Get(0).(func() ([]*domains.Task, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() []*domains.Task); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domains.Task)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByID provides a mock function with given fields: id
func (_m *TaskRepository) GetTaskByID(id string) (*domains.Task, error) {
	ret := _m.Called(id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 *domains.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(string) (*domains.Task, error)); ok {
		return rf(id)
	}
	if rf, ok := ret.Get(0).(func(string) *domains.Task); ok {
		r0 = rf(id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(string) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTask provides a mock function with given fields: task
func (_m *TaskRepository) UpdateTask(task *domains.Task) error {
	ret := _m.Called(task)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTask")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(*domains.Task) error); ok {
		r0 = rf(task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// UpdateTaskByCreatorID provides a mock function with given fields: ctx, task
func (_m *TaskRepository) UpdateTaskByCreatorID(ctx context.Context, task *domains.Task) error {
	ret := _m.Called(ctx, task)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskByCreatorID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, *domains.Task) error); ok {
		r0 = rf(ctx, task)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewTaskRepository creates a new instance of TaskRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskRepository(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskRepository {
	mock := &TaskRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
