// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domains "task-manager-api/domains"

	mock "github.com/stretchr/testify/mock"

	primitive "go.mongodb.org/mongo-driver/bson/primitive"

	time "time"
)

// TaskUsecase is an autogenerated mock type for the TaskUsecase type
type TaskUsecase struct {
	mock.Mock
}

// CreateTask provides a mock function with given fields: ctx, title, description, dueDate, creatorID
func (_m *TaskUsecase) CreateTask(ctx context.Context, title string, description string, dueDate time.Time, creatorID primitive.ObjectID) (*domains.Task, error) {
	ret := _m.Called(ctx, title, description, dueDate, creatorID)

	if len(ret) == 0 {
		panic("no return value specified for CreateTask")
	}

	var r0 *domains.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time, primitive.ObjectID) (*domains.Task, error)); ok {
		return rf(ctx, title, description, dueDate, creatorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, time.Time, primitive.ObjectID) *domains.Task); ok {
		r0 = rf(ctx, title, description, dueDate, creatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, time.Time, primitive.ObjectID) error); ok {
		r1 = rf(ctx, title, description, dueDate, creatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// DeleteTaskByCreatorID provides a mock function with given fields: ctx, taskID, creatorID
func (_m *TaskUsecase) DeleteTaskByCreatorID(ctx context.Context, taskID primitive.ObjectID, creatorID primitive.ObjectID) error {
	ret := _m.Called(ctx, taskID, creatorID)

	if len(ret) == 0 {
		panic("no return value specified for DeleteTaskByCreatorID")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r0 = rf(ctx, taskID, creatorID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// GetTaskByID provides a mock function with given fields: ctx, id
func (_m *TaskUsecase) GetTaskByID(ctx context.Context, id string) (*domains.Task, error) {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByID")
	}

	var r0 *domains.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*domains.Task, error)); ok {
		return rf(ctx, id)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *domains.Task); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTaskByIDAndCreator provides a mock function with given fields: ctx, taskID, creatorID
func (_m *TaskUsecase) GetTaskByIDAndCreator(ctx context.Context, taskID primitive.ObjectID, creatorID primitive.ObjectID) (*domains.Task, error) {
	ret := _m.Called(ctx, taskID, creatorID)

	if len(ret) == 0 {
		panic("no return value specified for GetTaskByIDAndCreator")
	}

	var r0 *domains.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) (*domains.Task, error)); ok {
		return rf(ctx, taskID, creatorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID) *domains.Task); ok {
		r0 = rf(ctx, taskID, creatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, primitive.ObjectID) error); ok {
		r1 = rf(ctx, taskID, creatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetTasksByCreator provides a mock function with given fields: ctx, creatorID
func (_m *TaskUsecase) GetTasksByCreator(ctx context.Context, creatorID primitive.ObjectID) ([]*domains.Task, error) {
	ret := _m.Called(ctx, creatorID)

	if len(ret) == 0 {
		panic("no return value specified for GetTasksByCreator")
	}

	var r0 []*domains.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) ([]*domains.Task, error)); ok {
		return rf(ctx, creatorID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID) []*domains.Task); ok {
		r0 = rf(ctx, creatorID)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]*domains.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID) error); ok {
		r1 = rf(ctx, creatorID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// UpdateTaskByCreatorID provides a mock function with given fields: ctx, taskID, creatorID, title, description, completed, dueDate
func (_m *TaskUsecase) UpdateTaskByCreatorID(ctx context.Context, taskID primitive.ObjectID, creatorID primitive.ObjectID, title string, description string, completed bool, dueDate time.Time) (*domains.Task, error) {
	ret := _m.Called(ctx, taskID, creatorID, title, description, completed, dueDate)

	if len(ret) == 0 {
		panic("no return value specified for UpdateTaskByCreatorID")
	}

	var r0 *domains.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID, string, string, bool, time.Time) (*domains.Task, error)); ok {
		return rf(ctx, taskID, creatorID, title, description, completed, dueDate)
	}
	if rf, ok := ret.Get(0).(func(context.Context, primitive.ObjectID, primitive.ObjectID, string, string, bool, time.Time) *domains.Task); ok {
		r0 = rf(ctx, taskID, creatorID, title, description, completed, dueDate)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, primitive.ObjectID, primitive.ObjectID, string, string, bool, time.Time) error); ok {
		r1 = rf(ctx, taskID, creatorID, title, description, completed, dueDate)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewTaskUsecase creates a new instance of TaskUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewTaskUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *TaskUsecase {
	mock := &TaskUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
