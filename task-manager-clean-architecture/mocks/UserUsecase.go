// Code generated by mockery v2.44.1. DO NOT EDIT.

package mocks

import (
	context "context"
	domains "task-manager-api/domains"

	mock "github.com/stretchr/testify/mock"
)

// UserUsecase is an autogenerated mock type for the UserUsecase type
type UserUsecase struct {
	mock.Mock
}

// AuthenticateUser provides a mock function with given fields: ctx, username, password
func (_m *UserUsecase) AuthenticateUser(ctx context.Context, username string, password string) (*domains.User, bool) {
	ret := _m.Called(ctx, username, password)

	if len(ret) == 0 {
		panic("no return value specified for AuthenticateUser")
	}

	var r0 *domains.User
	var r1 bool
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (*domains.User, bool)); ok {
		return rf(ctx, username, password)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) *domains.User); ok {
		r0 = rf(ctx, username, password)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) bool); ok {
		r1 = rf(ctx, username, password)
	} else {
		r1 = ret.Get(1).(bool)
	}

	return r0, r1
}

// RegisterUser provides a mock function with given fields: ctx, username, password, role
func (_m *UserUsecase) RegisterUser(ctx context.Context, username string, password string, role string) (*domains.User, error) {
	ret := _m.Called(ctx, username, password, role)

	if len(ret) == 0 {
		panic("no return value specified for RegisterUser")
	}

	var r0 *domains.User
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) (*domains.User, error)); ok {
		return rf(ctx, username, password, role)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, string) *domains.User); ok {
		r0 = rf(ctx, username, password, role)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domains.User)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, string) error); ok {
		r1 = rf(ctx, username, password, role)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewUserUsecase creates a new instance of UserUsecase. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewUserUsecase(t interface {
	mock.TestingT
	Cleanup(func())
}) *UserUsecase {
	mock := &UserUsecase{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
